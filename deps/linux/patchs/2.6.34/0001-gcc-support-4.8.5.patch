From f28051e38b983b6576cacd8821563046e7c4149a Mon Sep 17 00:00:00 2001
From: jiangxiaoming <jiangxiaoming@xdja.com>
Date: Tue, 14 Jun 2022 11:35:38 +0800
Subject: [PATCH 1/1] gcc support 4.8.5

---
 arch/um/Makefile-i386         | 2 +-
 arch/um/Makefile-x86_64       | 2 +-
 arch/x86/include/asm/percpu.h | 2 ++
 arch/x86/vdso/Makefile        | 4 ++--
 drivers/acpi/osl.c            | 2 ++
 drivers/net/igbvf/igbvf.h     | 1 -
 include/linux/irq.h           | 2 +-
 include/linux/pagemap.h       | 4 +++-
 include/net/xfrm.h            | 2 +-
 kernel/hrtimer.c              | 3 +--
 scripts/recordmcount.pl       | 4 ++--
 usr/initramfs_data.S          | 4 ++--
 usr/initramfs_data.bz2.S      | 4 ++--
 usr/initramfs_data.gz.S       | 4 ++--
 usr/initramfs_data.lzma.S     | 4 ++--
 15 files changed, 24 insertions(+), 20 deletions(-)

diff --git a/arch/um/Makefile-i386 b/arch/um/Makefile-i386
index 302cbe50..04c355b9 100644
--- a/arch/um/Makefile-i386
+++ b/arch/um/Makefile-i386
@@ -4,7 +4,7 @@ TOP_ADDR := $(CONFIG_TOP_ADDR)
 
 START := 0x8048000
 
-LDFLAGS			+= -m elf_i386
+LDFLAGS			+= -m32
 ELF_ARCH		:= $(SUBARCH)
 ELF_FORMAT 		:= elf32-$(SUBARCH)
 OBJCOPYFLAGS  		:= -O binary -R .note -R .comment -S
diff --git a/arch/um/Makefile-x86_64 b/arch/um/Makefile-x86_64
index a9cd7e77..dcc12ff9 100644
--- a/arch/um/Makefile-x86_64
+++ b/arch/um/Makefile-x86_64
@@ -10,7 +10,7 @@ KBUILD_CFLAGS += $(_extra_flags_)
 
 CHECKFLAGS  += -m64 -D__x86_64__
 KBUILD_AFLAGS += -m64
-LDFLAGS += -m elf_x86_64
+LDFLAGS += -m64
 KBUILD_CPPFLAGS += -m64
 
 ELF_ARCH := i386:x86-64
diff --git a/arch/x86/include/asm/percpu.h b/arch/x86/include/asm/percpu.h
index 66a272df..afbf61b7 100644
--- a/arch/x86/include/asm/percpu.h
+++ b/arch/x86/include/asm/percpu.h
@@ -77,6 +77,7 @@ do {							\
 	if (0) {					\
 		pto_T__ pto_tmp__;			\
 		pto_tmp__ = (val);			\
+		(void)pto_tmp__;					\
 	}						\
 	switch (sizeof(var)) {				\
 	case 1:						\
@@ -115,6 +116,7 @@ do {									\
 	if (0) {							\
 		pao_T__ pao_tmp__;					\
 		pao_tmp__ = (val);					\
+		(void)pao_tmp__;					\
 	}								\
 	switch (sizeof(var)) {						\
 	case 1:								\
diff --git a/arch/x86/vdso/Makefile b/arch/x86/vdso/Makefile
index 6b4ffedb..dd78ef68 100644
--- a/arch/x86/vdso/Makefile
+++ b/arch/x86/vdso/Makefile
@@ -25,7 +25,7 @@ targets += vdso.so vdso.so.dbg vdso.lds $(vobjs-y)
 
 export CPPFLAGS_vdso.lds += -P -C
 
-VDSO_LDFLAGS_vdso.lds = -m elf_x86_64 -Wl,-soname=linux-vdso.so.1 \
+VDSO_LDFLAGS_vdso.lds = -m64 -Wl,-soname=linux-vdso.so.1 \
 		      	-Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
 
 $(obj)/vdso.o: $(src)/vdso.S $(obj)/vdso.so
@@ -69,7 +69,7 @@ vdso32.so-$(VDSO32-y)		+= sysenter
 vdso32-images			= $(vdso32.so-y:%=vdso32-%.so)
 
 CPPFLAGS_vdso32.lds = $(CPPFLAGS_vdso.lds)
-VDSO_LDFLAGS_vdso32.lds = -m elf_i386 -Wl,-soname=linux-gate.so.1
+VDSO_LDFLAGS_vdso32.lds = -m32 -Wl,-soname=linux-gate.so.1
 
 # This makes sure the $(obj) subdirectory exists even though vdso32/
 # is not a kbuild sub-make subdirectory.
diff --git a/drivers/acpi/osl.c b/drivers/acpi/osl.c
index 7594f658..5e3f6858 100644
--- a/drivers/acpi/osl.c
+++ b/drivers/acpi/osl.c
@@ -150,6 +150,8 @@ static void __init acpi_request_region (struct acpi_generic_address *addr,
 		res = request_region(addr->address, length, desc);
 	else if (addr->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)
 		res = request_mem_region(addr->address, length, desc);
+	
+	(void*)res;
 }
 
 static int __init acpi_reserve_resources(void)
diff --git a/drivers/net/igbvf/igbvf.h b/drivers/net/igbvf/igbvf.h
index debeee2d..f7ae2846 100644
--- a/drivers/net/igbvf/igbvf.h
+++ b/drivers/net/igbvf/igbvf.h
@@ -126,7 +126,6 @@ struct igbvf_buffer {
 			unsigned int page_offset;
 		};
 	};
-	struct page *page;
 };
 
 union igbvf_desc {
diff --git a/include/linux/irq.h b/include/linux/irq.h
index 707ab122..14e8fa8b 100644
--- a/include/linux/irq.h
+++ b/include/linux/irq.h
@@ -438,12 +438,12 @@ extern int set_irq_msi(unsigned int irq, struct msi_desc *entry);
 static inline bool alloc_desc_masks(struct irq_desc *desc, int node,
 							bool boot)
 {
+#ifdef CONFIG_CPUMASK_OFFSTACK
 	gfp_t gfp = GFP_ATOMIC;
 
 	if (boot)
 		gfp = GFP_NOWAIT;
 
-#ifdef CONFIG_CPUMASK_OFFSTACK
 	if (!alloc_cpumask_var_node(&desc->affinity, gfp, node))
 		return false;
 
diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h
index 3c62ed40..78a702ce 100644
--- a/include/linux/pagemap.h
+++ b/include/linux/pagemap.h
@@ -423,8 +423,10 @@ static inline int fault_in_pages_readable(const char __user *uaddr, int size)
 		const char __user *end = uaddr + size - 1;
 
 		if (((unsigned long)uaddr & PAGE_MASK) !=
-				((unsigned long)end & PAGE_MASK))
+				((unsigned long)end & PAGE_MASK)) {
 		 	ret = __get_user(c, end);
+			(void)c;
+		}
 	}
 	return ret;
 }
diff --git a/include/net/xfrm.h b/include/net/xfrm.h
index ac52f33f..6af16b13 100644
--- a/include/net/xfrm.h
+++ b/include/net/xfrm.h
@@ -1587,7 +1587,7 @@ static inline struct xfrm_state *xfrm_input_state(struct sk_buff *skb)
 static inline int xfrm_mark_get(struct nlattr **attrs, struct xfrm_mark *m)
 {
 	if (attrs[XFRMA_MARK])
-		memcpy(m, nla_data(attrs[XFRMA_MARK]), sizeof(m));
+		memcpy(m, nla_data(attrs[XFRMA_MARK]), sizeof(*m));
 	else
 		m->v = m->m = 0;
 
diff --git a/kernel/hrtimer.c b/kernel/hrtimer.c
index 0086628b..e13e5141 100644
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -1096,11 +1096,10 @@ EXPORT_SYMBOL_GPL(hrtimer_cancel);
  */
 ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
 {
-	struct hrtimer_clock_base *base;
 	unsigned long flags;
 	ktime_t rem;
 
-	base = lock_hrtimer_base(timer, &flags);
+	lock_hrtimer_base(timer, &flags);
 	rem = hrtimer_expires_remaining(timer);
 	unlock_hrtimer_base(timer, &flags);
 
diff --git a/scripts/recordmcount.pl b/scripts/recordmcount.pl
index f3c9c0a9..86caf6a5 100755
--- a/scripts/recordmcount.pl
+++ b/scripts/recordmcount.pl
@@ -221,7 +221,7 @@ if ($arch eq "x86_64") {
     $alignment = 8;
 
     # force flags for this arch
-    $ld .= " -m elf_x86_64";
+    $ld .= " -m64";
     $objdump .= " -M x86-64";
     $objcopy .= " -O elf64-x86-64";
     $cc .= " -m64";
@@ -230,7 +230,7 @@ if ($arch eq "x86_64") {
     $alignment = 4;
 
     # force flags for this arch
-    $ld .= " -m elf_i386";
+    $ld .= " -m32";
     $objdump .= " -M i386";
     $objcopy .= " -O elf32-i386";
     $cc .= " -m32";
diff --git a/usr/initramfs_data.S b/usr/initramfs_data.S
index 7c6973d8..a69a1056 100644
--- a/usr/initramfs_data.S
+++ b/usr/initramfs_data.S
@@ -7,9 +7,9 @@
   following trick can be applied to create the resulting binary:
 
 
-  ld -m elf_i386  --format binary --oformat elf32-i386 -r \
+  ld -m32  --format binary --oformat elf32-i386 -r \
   -T initramfs_data.scr initramfs_data.cpio.gz -o initramfs_data.o
-   ld -m elf_i386  -r -o built-in.o initramfs_data.o
+   ld -m32  -r -o built-in.o initramfs_data.o
 
   initramfs_data.scr looks like this:
 SECTIONS
diff --git a/usr/initramfs_data.bz2.S b/usr/initramfs_data.bz2.S
index bc54d090..5c474d69 100644
--- a/usr/initramfs_data.bz2.S
+++ b/usr/initramfs_data.bz2.S
@@ -7,9 +7,9 @@
   following trick can be applied to create the resulting binary:
 
 
-  ld -m elf_i386  --format binary --oformat elf32-i386 -r \
+  ld -m32  --format binary --oformat elf32-i386 -r \
   -T initramfs_data.scr initramfs_data.cpio.gz -o initramfs_data.o
-   ld -m elf_i386  -r -o built-in.o initramfs_data.o
+   ld -m32  -r -o built-in.o initramfs_data.o
 
   initramfs_data.scr looks like this:
 SECTIONS
diff --git a/usr/initramfs_data.gz.S b/usr/initramfs_data.gz.S
index 890c8dd1..3a9b4257 100644
--- a/usr/initramfs_data.gz.S
+++ b/usr/initramfs_data.gz.S
@@ -7,9 +7,9 @@
   following trick can be applied to create the resulting binary:
 
 
-  ld -m elf_i386  --format binary --oformat elf32-i386 -r \
+  ld -m32  --format binary --oformat elf32-i386 -r \
   -T initramfs_data.scr initramfs_data.cpio.gz -o initramfs_data.o
-   ld -m elf_i386  -r -o built-in.o initramfs_data.o
+   ld -m32  -r -o built-in.o initramfs_data.o
 
   initramfs_data.scr looks like this:
 SECTIONS
diff --git a/usr/initramfs_data.lzma.S b/usr/initramfs_data.lzma.S
index e11469e4..bb19439a 100644
--- a/usr/initramfs_data.lzma.S
+++ b/usr/initramfs_data.lzma.S
@@ -7,9 +7,9 @@
   following trick can be applied to create the resulting binary:
 
 
-  ld -m elf_i386  --format binary --oformat elf32-i386 -r \
+  ld -m32  --format binary --oformat elf32-i386 -r \
   -T initramfs_data.scr initramfs_data.cpio.gz -o initramfs_data.o
-   ld -m elf_i386  -r -o built-in.o initramfs_data.o
+   ld -m32  -r -o built-in.o initramfs_data.o
 
   initramfs_data.scr looks like this:
 SECTIONS
-- 
2.35.0

